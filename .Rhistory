Stats.grouped = function(df, dv, iv)
{
means = tapply(df[,dv], df[,iv], mean, na.rm=T)
variance = tapply(df[,dv], df[,iv], var, na.rm=T)
n = tapply(df[,dv], df[,iv], length)
stats = as.data.frame(means)
stats = cbind(stats, variance, n)
return(stats)
}
df = data
cols.return = c(4:5)
m = NULL
for(j in 1:length(cols.return)) {
m[j] = mean(df[,cols.return[j]], na.rm=T)
v[j] = var(df[,cols.return[j]], na.rm=T)
}
m = NULL
v = NULL
for(j in 1:length(cols.return)) {
m[j] = mean(df[,cols.return[j]], na.rm=T)
v[j] = var(df[,cols.return[j]], na.rm=T)
}
cv = cov(df[2:nrow(df),cols.return[1]], df[2:nrow(df), cols.return[2]])
df.stats = Stats(df, c(4:5))
df.stats
m
v
df.stats = Stats(df, cols.return)
df.stats
df$period = df$Date>"2004"
df$period = df$Date>"2004-12-31"
df$period = as.factor(df$Date>"2004-12-31")
df$period = as.factor(ifelse(df$Date>"2003-12-31", "1992-2003", "2004-2015")
)
head(df)
df$period = as.factor(ifelse(df$Date>"2003-12-31", "2004-2015", "1992-2003")
)
head(df)
df.stats.gp = Stats.grouped(df, cols.return, 6)
df.stats.gp = Stats.grouped(df, 4, 6)
df.stats.gp
stats.spx.index = Stats.grouped(df, 4, 6)
stats.us.index = Stats.grouped(df, 5, 6)
stats.spx.index
stats.us.index
pref.sample = function(exp.return, risk.aversion, variance) {
print(exp.return - (risk.aversion/2 * variance))
}
pref.sample = function(exp.return, risk.aversion, v = variance) {
if v = variance {
print(exp.return - (risk.aversion/2 * variance))
}
if v = volatility {
variance = v^2
print(exp.return - (risk.aversion/2 * variance))
}
}
pref.sample = function(exp.return, risk.aversion, v = variance) {
if v == variance {
print(exp.return - (risk.aversion/2 * variance))
}
if v == volatility {
variance = v^2
print(exp.return - (risk.aversion/2 * variance))
}
}
pref.sample = function(exp.return, risk.aversion, v) {
if v == variance {
print(exp.return - (risk.aversion/2 * variance))
}
if v == volatility {
variance = v^2
print(exp.return - (risk.aversion/2 * variance))
}
}
pref.sample = function(exp.return, risk.aversion, v) {
if v == "variance" {
print(exp.return - (risk.aversion/2 * variance))
}
if v == "volatility" {
variance = v^2
print(exp.return - (risk.aversion/2 * variance))
}
}
f1 <- function(a='A',b=NULL) {
print( ifelse( is.null(a), 'a not specified', paste('a =',a) ) )
print( ifelse( is.null(b), 'b not specified', paste('b =',b) ) )
}
f1
f1()
f1(b="bull")
f2 <- function(a='A',b) {
print( ifelse( missing(a), 'a not specified', paste('a =',a) ) )
print( ifelse( missing(b), 'b not specified', paste('b =',b) ) )
}
f2()
f2(b="bee")
f2(a=NULL, b="bee")
f2(a="NULL", b="bee")
f2(a)
callf2 <- function(a='A',b=NULL) {
print( ifelse( is.null(a), '# a not specified', paste('# a =',a) ) )
print( ifelse( is.null(b), '# b not specified', paste('# b =',b) ) )
argList <-  as.list(match.call(expand.dots = TRUE)[-1])
# Enforce inclusion of non-optional arguments
argList$a <- a
do.call(f2,argList)
}
callf2()
p = function(e, r=2) {
print(e - r/2)
}
p(3)
p(3,4)
p = function(e, r=2, v) {
print(e - r/2 * v)
}
p(3,4)
p(3,v=4)
p = function(e, v, r=2) {
print(e - r/2 * v)
}
p(3,4)
p = function(e, v, r=2, v.type = c("var", "vol")) {
ifelse(v.type == "vol", V = v^2, V = v)
print(e - r/2 * V)
}
p(3, 4, v.type = "vol")
p = function(e, v, r=2, v.type = c("var", "vol")) {
ifelse(v.type == "vol", (V = v^2), (V = v))
print(e - r/2 * V)
}
p(3, 4, v.type = "vol")
p(3, 4, v.type = "var")
p = function(e, v, r=2, v.type = c("var", "vol", "sd")) {
ifelse(v.type == "vol" | v.type == "sd", (V = v^2), (V = v))
print(e - r/2 * V)
}
p(3, 4, v.type = "var")
p(3, 4, v.type = "sd")
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample(0.02, 0.2, v.type="vol")
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
exp.return = exp.return/100
variability = variability/100
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample(2, 20, v.type="vol")
rm(list=ls())
require(lubridate)
knitr::opts_chunk$set(echo = TRUE)
# clean workspace
rm(list=ls())
# packages
require(lubridate)
# functions
Stats <- function(df, cols.return)
{
m = NULL
v = NULL
for(j in 1:length(cols.return)) {
m[j] = mean(df[,cols.return[j]], na.rm=T)
v[j] = var(df[,cols.return[j]], na.rm=T)
}
cv = cov(df[2:nrow(df),cols.return[1]], df[2:nrow(df),cols.return[2]])
s = as.data.frame(cbind(m,v,cv))
s$cv[1] = NA
names(s) = c("Average", "Variance", "Covariance")
row.names(s) = names(df[,cols.return])
return(s)
}
Stats.grouped = function(df, dv, iv)
{
means = tapply(df[,dv], df[,iv], mean, na.rm=T)
variance = tapply(df[,dv], df[,iv], var, na.rm=T)
n = tapply(df[,dv], df[,iv], length)
stats = as.data.frame(means)
stats = cbind(stats, variance, n)
return(stats)
}
# multiple files
#fileNames <- Sys.glob("*.csv")
#col.names = c("Date", "Amount", "Description", "Balance")
#data.ls = NULL
#for (i in 1:length(fileNames)) {
#  data.ls[[i]] <- read.csv(fileNames[i], header = F, stringsAsFactors = F)
#  names(data.ls[[i]]) = col.names
#  data.ls[[i]]$Date = as.POSIXlt(data.ls[[i]]$Date, format = "%d/%m/%Y")
#}
# single file
data <- read.csv("Data.csv", header = T, stringsAsFactors = F)
cols.price = c(2,3)
for (i in cols.price) {
names(data)[i] = paste0(names(data)[i], ".Price")
}
data$Date = as.POSIXlt(data$Date, format = "%d/%m/%Y")
df = data
for (j in cols.price) {
for (i in 2:nrow(df)) {
df[i,(j+2)] = df[i,j]/df[(i-1),j] - 1
}
names(df)[(j+2)] = gsub(".Price", ".Returns", names(df)[(j)])
}
data = df
df = data
cols.return = c(4:5)
m = NULL
v = NULL
for(j in 1:length(cols.return)) {
m[j] = mean(df[,cols.return[j]], na.rm=T)
v[j] = var(df[,cols.return[j]], na.rm=T)
}
cv = cov(df[2:nrow(df),cols.return[1]], df[2:nrow(df), cols.return[2]])
df.stats = Stats(df, cols.return)
df.stats
df$period = as.factor(ifelse(df$Date>"2003-12-31", "2004-2015", "1992-2003"))
stats.spx.index = Stats.grouped(df, 4, 6)
stats.spx.index
stats.us.index = Stats.grouped(df, 5, 6)
stats.us.index
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
exp.return = exp.return/100
variability = variability/100
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample(exp.return=2, variability=20, v.type="vol")
pref.sample(2, 20, v.type="vol")
E.vec = c(1, 2, 3)
p.vec = c(1, 2, 3)
sum(E.vec * p.vec)
sum(E.vec * p.vec)/100
c(1, 2, 3)/100
E.vec = c(1, 2, 3)/100
p.vec = c(1, 2, 3)/100
sum(E.vec * p.vec)
stats.spx.index
stats.us.index
stats.spx.index *100
stats.us.index *100
df.stats
df.stats[1,1]
pref.sample(exp.return=df.stats[1,1], variability=df.stats[1,2], v.type="var")
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
ifelse(exp.return > 1, exp.return = exp.return, exp.return = exp.return/100)
ifelse(variability > 1, variability = variability, variability = variability/100)
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample(exp.return=df.stats[1,1], variability=df.stats[1,2], v.type="var")
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
ifelse(exp.return >= 1, exp.return = exp.return, exp.return = exp.return/100)
ifelse(variability >= 1, variability = variability, variability = variability/100)
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample(exp.return=2, variability=20, v.type="vol")
pref.sample.percent = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
exp.return = exp.return/100
variability = variability/100
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample = function(exp.return, variability, risk.aversion=2, v.type = c("var", "vol", "sd")) {
exp.return = exp.return
variability = variability
ifelse(v.type == "vol" | v.type == "sd", (variance = variability^2), (variance = variability))
print(exp.return - risk.aversion/2 * variance)
}
pref.sample.percent(exp.return=2, variability=20, v.type="vol")
pref.sample.percent(2, 20, v.type="vol")
pref.sample(exp.return=df.stats[1,1], variability=df.stats[1,2], v.type="var")
pref.sample(exp.return=df.stats[1,1], variability=df.stats[1,2], risk.aversion=10, v.type="var")
df.stats
pref.sample(exp.return=df.stats[2,1], variability=df.stats[2,2], risk.aversion=10, v.type="var")
head(df)
df2 = subset(df, Date > "1995-11-30")
summary(df2)
which(df$Date == "1996-01-31")
start = which(df$Date == "1996-01-31")
for(i in start:nrow(df)) {
exp.ave[i] = mean(df[1:i])
}
for(i in start:nrow(df)) {
exp.ave[i,1] = mean(df[1:i,4])
}
exp.ave = NULL
for(i in start:nrow(df)) {
exp.ave[i,1] = mean(df[1:i,4])
}
mean(df[1:i,4])
exp.ave = NULL
for(i in start:nrow(df)) {
exp.ave[i,1] = mean(df[2:i,4])
}
mean(df[2:i,4])
exp.ave = as.data.frame(rep(0,289))
rep(0,5)
cbind(rep(0,5), rep(0,5))
cbind(rep(rep(0,5),2))
a = rep(0,289)
exp.ave = as.data.frame(cbind(a, a, a, a)
)
head(exp.ave)
for(i in start:nrow(df)) {
exp.ave[i,1] = mean(df[2:i,4])
}
exp.ave[,1]
i=1
i-start+1
start = which(df$Date == "1996-01-31")
i-start+1
i=1
start=50
start-1
1-50
50 - (50-1)
start-(start-i)
i=2
start-(start-i)
for(i in start:nrow(df)) {
exp.ave[(start-(start-i)),1] = mean(df[2:i,4])
}
exp.ave[,1]
i=50
i-(i+i)
i-(i+1)
i-i+1)
i-i+1
i-start+1
i=55
i-start+1
for(i in start:nrow(df)) {
exp.ave[(i-start+1),1] = mean(df[2:i,4])
}
exp.ave
for(j in 4:5) {
for(i in start:nrow(df)) {
exp.ave[(i-start+1),(j-3)] = mean(df[2:i,j])
}
}
exp.ave
plot(df[,5])
plot(df[,1], df[,5])
df[c(1:30,230:280),5]
plot(df[,1], df[,5], abline)
df2 = df[2:nrow(df),]
plot.ts(df2[,1], df2[,5])
plot.ts(df2[,5], df2[,1])
str(df2)
dates = ts(df[,1])
with(df, plot(SPXindex.Price, USindex.Price))
with(df, plot(SPXindex.Returns, USindex.Returns))
plot(df[,1], 10)
plot(df2[,1], rep(10,288)
)
plot(df2[,1], df2[,4])
quartz()
plot(df2[,1], df2[,4])
plot(df2[,1], df2[,4], type="o", col="blue")
plot(df2[,1], df2[,5], type="o", col="red")
plot(df2[,1], df2[,4:5], type="o", col=c("red", "blue")
)
quartz()
plot(df2[,1], df2[,4], type="o", col="red")
lines(df2[,5], type="o", pch=22, lty=2, col="blue")
?hold
??hold
quartz()
plot(df2[,1], df2[,4], type="o", col="red")
dev.hold
plot(df2[,1], df2[,5], type="o", col="blue")
dev.flush
quartz()
plot(df2[,1], df2[,4], type="o", col="red")
dev.hold
plot(df2[,1], df2[,5], type="o", col="blue")
x11()
plot(df2[,1], df2[,4], type="o", col="red")
dev.hold
plot(df2[,1], df2[,5], type="o", col="blue")
quartz()
plot(df2[,1], df2[,4], type="o", col="red")
plot(df2[,1], df2[,5], type="o", col="blue")
quartz()
plot(df2[,1], c(0,1), type="n")
lines(df2[,1], df2[,4], col="red", lwd=2)
lines(df2[,1], df2[,5], col="blue", lwd=2)
quartz()
plot(df2[,1],df2[,4], type="n")
lines(df2[,1], df2[,4], col="red", lwd=2)
lines(df2[,1], df2[,5], col="blue", lwd=2)
summary(exp.ave)
str(exp.ave)
a = rep(0,(nrow(df) - start))
exp.ave = as.data.frame(cbind(a, a, a, a))
for(j in 4:5) {
for(i in start:nrow(df)) {
exp.ave[(i-start+1),(j-3)] = mean(df[2:i,j])
}
}
str(exp.ave)
head(exp.ave)
tail(exp.ave)
a = rep(0,(nrow(df) - start + 1))
exp.ave = as.data.frame(cbind(a, a, a, a))
for(j in 4:5) {
for(i in start:nrow(df)) {
exp.ave[(i-start+1),(j-3)] = mean(df[2:i,j])
}
}
head(exp.ave)
tail(exp.ave)
dates = df[50:nrow(df),1]
equity = exp.ave[,1]
bonds = exp.ave[,2]
quartz()
plot(dates, equity, type="n")
lines(dates, equity, col="red", lwd=2)
lines(dates, bonds, col="blue", lwd=2)
head(df)
start = which(df$Date == "1996-01-31")
a = rep(0,(nrow(df) - start + 1))
exp.ave = as.data.frame(cbind(a, a))
exp.var = as.data.frame(cbind(a, a))
exp.cov = as.data.frame(a)
for(j in 4:5) {
for(i in start:nrow(df)) {
exp.ave[(i-start+1),(j-3)] = mean(df[2:i,j])
exp.var[(i-start+1),(j-3)] = var(df[2:i,j])
}
}
head(exp.ave)
head(exp.var)
dates = df[50:nrow(df),1]
equity = exp.ave[,1]
bonds = exp.ave[,2]
quartz()
plot(dates, equity, type="n")
lines(dates, equity, col="red", lwd=2)
lines(dates, bonds, col="blue", lwd=2)
equity = exp.var[,1]
bonds = exp.var[,2]
quartz()
plot(dates, equity, type="n")
lines(dates, equity, col="red", lwd=2)
lines(dates, bonds, col="blue", lwd=2)
head(exp.var)
equity = exp.var[,1]
bonds = exp.var[,2]
quartz()
plot(dates, equity, type="n")
#lines(dates, equity, col="red", lwd=2)
lines(dates, bonds, col="blue", lwd=2)
summary(exp.var)
bonds = exp.var[,2]*10
plot(dates, equity, type="n")
lines(dates, bonds, col="blue", lwd=2)
plot(dates, bonds)
cv = cov(exp.ave[,1], exp.ave[,2])
cv = NULL
for(i in 1:nrow(exp.ave)) {
cv[i] = cov(exp.ave[i,1], exp.ave[i,2])
}
cv
cv = NULL
for(i in start:nrow(df)) {
exp.cov[(i-start+1),1] = cov(df[2:i,4], df[2:i,5])
}
start
nrow(df)
i=1
i-start+1
i=50
i-start+1
cov(df[2:i,4], df[2:i,5])
cv = NULL
for(i in start:nrow(df)) {
exp.cov[(i-start+1)] = cov(df[2:i,4], df[2:i,5])
}
exp.cov
exp.cov = NULL
for(i in start:nrow(df)) {
exp.cov[(i-start+1)] = cov(df[2:i,4], df[2:i,5])
}
summary(exp.cov)
plot(dates, exp.cov)
rm(list=ls())
a = c(1,3,2)
trans(a)
t(a)
b = t(a)
a*b
a
b
a %*% b
a %o% b
require(MASS)
c = a %*% b
c
ginv(c)
diag(3)
ginv(c) * diag(c)
ginv(c) %*% diag(c)
c %*% diag(c)
c
c %*% ginv(c)
c %*% diag(3)
